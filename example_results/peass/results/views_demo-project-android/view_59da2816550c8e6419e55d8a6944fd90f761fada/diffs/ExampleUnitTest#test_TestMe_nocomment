app§com.example.android_example.ExampleUnitTest#test_TestMe						app§com.example.android_example.ExampleUnitTest#test_TestMe
@Test													@Test
@de.dagere.kopeme.annotations.PerformanceTest(iterations = 1, warmup = 0, logFullData = true, us	@de.dagere.kopeme.annotations.PerformanceTest(iterations = 1, warmup = 0, logFullData = true, us
public void test_TestMe() {										public void test_TestMe() {
    final String _kieker_sourceInstrumentation_signature = "public void com.example.android_exam	    final String _kieker_sourceInstrumentation_signature = "public void com.example.android_exam
    ;													    ;
    // collect data											    // collect data
    final boolean _kieker_sourceInstrumentation_entrypoint;						    final boolean _kieker_sourceInstrumentation_entrypoint;
    final String _kieker_sourceInstrumentation_hostname = MonitoringController.getInstance().get	    final String _kieker_sourceInstrumentation_hostname = MonitoringController.getInstance().get
    final String _kieker_sourceInstrumentation_sessionId = SessionRegistry.INSTANCE.recallThread	    final String _kieker_sourceInstrumentation_sessionId = SessionRegistry.INSTANCE.recallThread
    // this is executionOrderIndex-th execution in this trace						    // this is executionOrderIndex-th execution in this trace
    final int _kieker_sourceInstrumentation_eoi;							    final int _kieker_sourceInstrumentation_eoi;
    // this is the height in the dynamic call tree of this execution					    // this is the height in the dynamic call tree of this execution
    final int _kieker_sourceInstrumentation_ess;							    final int _kieker_sourceInstrumentation_ess;
    // traceId, -1 if entry point									    // traceId, -1 if entry point
    long _kieker_sourceInstrumentation_traceId = ControlFlowRegistry.INSTANCE.recallThreadLocalT	    long _kieker_sourceInstrumentation_traceId = ControlFlowRegistry.INSTANCE.recallThreadLocalT
    if (_kieker_sourceInstrumentation_traceId == -1) {							    if (_kieker_sourceInstrumentation_traceId == -1) {
        _kieker_sourceInstrumentation_entrypoint = true;						        _kieker_sourceInstrumentation_entrypoint = true;
        _kieker_sourceInstrumentation_traceId = ControlFlowRegistry.INSTANCE.getAndStoreUniqueTh	        _kieker_sourceInstrumentation_traceId = ControlFlowRegistry.INSTANCE.getAndStoreUniqueTh
        ControlFlowRegistry.INSTANCE.storeThreadLocalEOI(0);						        ControlFlowRegistry.INSTANCE.storeThreadLocalEOI(0);
        // next operation is ess + 1									        // next operation is ess + 1
        ControlFlowRegistry.INSTANCE.storeThreadLocalESS(1);						        ControlFlowRegistry.INSTANCE.storeThreadLocalESS(1);
        _kieker_sourceInstrumentation_eoi = 0;								        _kieker_sourceInstrumentation_eoi = 0;
        _kieker_sourceInstrumentation_ess = 0;								        _kieker_sourceInstrumentation_ess = 0;
    } else {												    } else {
        _kieker_sourceInstrumentation_entrypoint = false;						        _kieker_sourceInstrumentation_entrypoint = false;
        // ess > 1											        // ess > 1
        _kieker_sourceInstrumentation_eoi = ControlFlowRegistry.INSTANCE.incrementAndRecallThrea	        _kieker_sourceInstrumentation_eoi = ControlFlowRegistry.INSTANCE.incrementAndRecallThrea
        // ess >= 0											        // ess >= 0
        _kieker_sourceInstrumentation_ess = ControlFlowRegistry.INSTANCE.recallAndIncrementThrea	        _kieker_sourceInstrumentation_ess = ControlFlowRegistry.INSTANCE.recallAndIncrementThrea
        if ((_kieker_sourceInstrumentation_eoi == -1) || (_kieker_sourceInstrumentation_ess == -	        if ((_kieker_sourceInstrumentation_eoi == -1) || (_kieker_sourceInstrumentation_ess == -
            System.err.println("eoi and/or ess have invalid values: eoi == {} ess == {}" + _kiek	            System.err.println("eoi and/or ess have invalid values: eoi == {} ess == {}" + _kiek
            MonitoringController.getInstance().terminateMonitoring();					            MonitoringController.getInstance().terminateMonitoring();
        }												        }
    }													    }
    // measure before											    // measure before
    final long _kieker_sourceInstrumentation_tin = MonitoringController.getInstance().getTimeSou	    final long _kieker_sourceInstrumentation_tin = MonitoringController.getInstance().getTimeSou
    ;													    ;
    try {												    try {
        TestMe t = new TestMe();									        TestMe t = new TestMe();
        // t.test() always returns 1, test will always pass						        // t.test() always returns 1, test will always pass
        Assert.assertNotEquals(0, t.test());								        Assert.assertNotEquals(0, t.test());
    } finally {												    } finally {
        // measure after										        // measure after
        final long _kieker_sourceInstrumentation_tout = MonitoringController.getInstance().getTi	        final long _kieker_sourceInstrumentation_tout = MonitoringController.getInstance().getTi
        MonitoringController.getInstance().newMonitoringRecord(new OperationExecutionRecord(_kie	        MonitoringController.getInstance().newMonitoringRecord(new OperationExecutionRecord(_kie
        // cleanup											        // cleanup
        if (_kieker_sourceInstrumentation_entrypoint) {							        if (_kieker_sourceInstrumentation_entrypoint) {
            ControlFlowRegistry.INSTANCE.unsetThreadLocalTraceId();					            ControlFlowRegistry.INSTANCE.unsetThreadLocalTraceId();
            ControlFlowRegistry.INSTANCE.unsetThreadLocalEOI();						            ControlFlowRegistry.INSTANCE.unsetThreadLocalEOI();
            ControlFlowRegistry.INSTANCE.unsetThreadLocalESS();						            ControlFlowRegistry.INSTANCE.unsetThreadLocalESS();
        } else {											        } else {
            // next operation is ess									            // next operation is ess
            ControlFlowRegistry.INSTANCE.storeThreadLocalESS(_kieker_sourceInstrumentation_ess);	            ControlFlowRegistry.INSTANCE.storeThreadLocalESS(_kieker_sourceInstrumentation_ess);
        }												        }
        ;												        ;
    }													    }
}													}
app§com.example.android_example.TestMe#<init>								app§com.example.android_example.TestMe#<init>
public TestMe() {											public TestMe() {
    final String _kieker_sourceInstrumentation_signature = "public new com.example.android_examp	    final String _kieker_sourceInstrumentation_signature = "public new com.example.android_examp
    ;													    ;
    // collect data											    // collect data
    final boolean _kieker_sourceInstrumentation_entrypoint;						    final boolean _kieker_sourceInstrumentation_entrypoint;
    final String _kieker_sourceInstrumentation_hostname = MonitoringController.getInstance().get	    final String _kieker_sourceInstrumentation_hostname = MonitoringController.getInstance().get
    final String _kieker_sourceInstrumentation_sessionId = SessionRegistry.INSTANCE.recallThread	    final String _kieker_sourceInstrumentation_sessionId = SessionRegistry.INSTANCE.recallThread
    // this is executionOrderIndex-th execution in this trace						    // this is executionOrderIndex-th execution in this trace
    final int _kieker_sourceInstrumentation_eoi;							    final int _kieker_sourceInstrumentation_eoi;
    // this is the height in the dynamic call tree of this execution					    // this is the height in the dynamic call tree of this execution
    final int _kieker_sourceInstrumentation_ess;							    final int _kieker_sourceInstrumentation_ess;
    // traceId, -1 if entry point									    // traceId, -1 if entry point
    long _kieker_sourceInstrumentation_traceId = ControlFlowRegistry.INSTANCE.recallThreadLocalT	    long _kieker_sourceInstrumentation_traceId = ControlFlowRegistry.INSTANCE.recallThreadLocalT
    if (_kieker_sourceInstrumentation_traceId == -1) {							    if (_kieker_sourceInstrumentation_traceId == -1) {
        _kieker_sourceInstrumentation_entrypoint = true;						        _kieker_sourceInstrumentation_entrypoint = true;
        _kieker_sourceInstrumentation_traceId = ControlFlowRegistry.INSTANCE.getAndStoreUniqueTh	        _kieker_sourceInstrumentation_traceId = ControlFlowRegistry.INSTANCE.getAndStoreUniqueTh
        ControlFlowRegistry.INSTANCE.storeThreadLocalEOI(0);						        ControlFlowRegistry.INSTANCE.storeThreadLocalEOI(0);
        // next operation is ess + 1									        // next operation is ess + 1
        ControlFlowRegistry.INSTANCE.storeThreadLocalESS(1);						        ControlFlowRegistry.INSTANCE.storeThreadLocalESS(1);
        _kieker_sourceInstrumentation_eoi = 0;								        _kieker_sourceInstrumentation_eoi = 0;
        _kieker_sourceInstrumentation_ess = 0;								        _kieker_sourceInstrumentation_ess = 0;
    } else {												    } else {
        _kieker_sourceInstrumentation_entrypoint = false;						        _kieker_sourceInstrumentation_entrypoint = false;
        // ess > 1											        // ess > 1
        _kieker_sourceInstrumentation_eoi = ControlFlowRegistry.INSTANCE.incrementAndRecallThrea	        _kieker_sourceInstrumentation_eoi = ControlFlowRegistry.INSTANCE.incrementAndRecallThrea
        // ess >= 0											        // ess >= 0
        _kieker_sourceInstrumentation_ess = ControlFlowRegistry.INSTANCE.recallAndIncrementThrea	        _kieker_sourceInstrumentation_ess = ControlFlowRegistry.INSTANCE.recallAndIncrementThrea
        if ((_kieker_sourceInstrumentation_eoi == -1) || (_kieker_sourceInstrumentation_ess == -	        if ((_kieker_sourceInstrumentation_eoi == -1) || (_kieker_sourceInstrumentation_ess == -
            System.err.println("eoi and/or ess have invalid values: eoi == {} ess == {}" + _kiek	            System.err.println("eoi and/or ess have invalid values: eoi == {} ess == {}" + _kiek
            MonitoringController.getInstance().terminateMonitoring();					            MonitoringController.getInstance().terminateMonitoring();
        }												        }
    }													    }
    // measure before											    // measure before
    final long _kieker_sourceInstrumentation_tin = MonitoringController.getInstance().getTimeSou	    final long _kieker_sourceInstrumentation_tin = MonitoringController.getInstance().getTimeSou
    ;													    ;
    // measure after											    // measure after
    final long _kieker_sourceInstrumentation_tout = MonitoringController.getInstance().getTimeSo	    final long _kieker_sourceInstrumentation_tout = MonitoringController.getInstance().getTimeSo
    MonitoringController.getInstance().newMonitoringRecord(new OperationExecutionRecord(_kieker_	    MonitoringController.getInstance().newMonitoringRecord(new OperationExecutionRecord(_kieker_
    // cleanup												    // cleanup
    if (_kieker_sourceInstrumentation_entrypoint) {							    if (_kieker_sourceInstrumentation_entrypoint) {
        ControlFlowRegistry.INSTANCE.unsetThreadLocalTraceId();						        ControlFlowRegistry.INSTANCE.unsetThreadLocalTraceId();
        ControlFlowRegistry.INSTANCE.unsetThreadLocalEOI();						        ControlFlowRegistry.INSTANCE.unsetThreadLocalEOI();
        ControlFlowRegistry.INSTANCE.unsetThreadLocalESS();						        ControlFlowRegistry.INSTANCE.unsetThreadLocalESS();
    } else {												    } else {
        // next operation is ess									        // next operation is ess
        ControlFlowRegistry.INSTANCE.storeThreadLocalESS(_kieker_sourceInstrumentation_ess);		        ControlFlowRegistry.INSTANCE.storeThreadLocalESS(_kieker_sourceInstrumentation_ess);
    }													    }
    ;													    ;
}													}
app§com.example.android_example.TestMe#test								app§com.example.android_example.TestMe#test
public int test() {											public int test() {
    final String _kieker_sourceInstrumentation_signature = "public int com.example.android_examp	    final String _kieker_sourceInstrumentation_signature = "public int com.example.android_examp
    ;													    ;
    // collect data											    // collect data
    final boolean _kieker_sourceInstrumentation_entrypoint;						    final boolean _kieker_sourceInstrumentation_entrypoint;
    final String _kieker_sourceInstrumentation_hostname = MonitoringController.getInstance().get	    final String _kieker_sourceInstrumentation_hostname = MonitoringController.getInstance().get
    final String _kieker_sourceInstrumentation_sessionId = SessionRegistry.INSTANCE.recallThread	    final String _kieker_sourceInstrumentation_sessionId = SessionRegistry.INSTANCE.recallThread
    // this is executionOrderIndex-th execution in this trace						    // this is executionOrderIndex-th execution in this trace
    final int _kieker_sourceInstrumentation_eoi;							    final int _kieker_sourceInstrumentation_eoi;
    // this is the height in the dynamic call tree of this execution					    // this is the height in the dynamic call tree of this execution
    final int _kieker_sourceInstrumentation_ess;							    final int _kieker_sourceInstrumentation_ess;
    // traceId, -1 if entry point									    // traceId, -1 if entry point
    long _kieker_sourceInstrumentation_traceId = ControlFlowRegistry.INSTANCE.recallThreadLocalT	    long _kieker_sourceInstrumentation_traceId = ControlFlowRegistry.INSTANCE.recallThreadLocalT
    if (_kieker_sourceInstrumentation_traceId == -1) {							    if (_kieker_sourceInstrumentation_traceId == -1) {
        _kieker_sourceInstrumentation_entrypoint = true;						        _kieker_sourceInstrumentation_entrypoint = true;
        _kieker_sourceInstrumentation_traceId = ControlFlowRegistry.INSTANCE.getAndStoreUniqueTh	        _kieker_sourceInstrumentation_traceId = ControlFlowRegistry.INSTANCE.getAndStoreUniqueTh
        ControlFlowRegistry.INSTANCE.storeThreadLocalEOI(0);						        ControlFlowRegistry.INSTANCE.storeThreadLocalEOI(0);
        // next operation is ess + 1									        // next operation is ess + 1
        ControlFlowRegistry.INSTANCE.storeThreadLocalESS(1);						        ControlFlowRegistry.INSTANCE.storeThreadLocalESS(1);
        _kieker_sourceInstrumentation_eoi = 0;								        _kieker_sourceInstrumentation_eoi = 0;
        _kieker_sourceInstrumentation_ess = 0;								        _kieker_sourceInstrumentation_ess = 0;
    } else {												    } else {
        _kieker_sourceInstrumentation_entrypoint = false;						        _kieker_sourceInstrumentation_entrypoint = false;
        // ess > 1											        // ess > 1
        _kieker_sourceInstrumentation_eoi = ControlFlowRegistry.INSTANCE.incrementAndRecallThrea	        _kieker_sourceInstrumentation_eoi = ControlFlowRegistry.INSTANCE.incrementAndRecallThrea
        // ess >= 0											        // ess >= 0
        _kieker_sourceInstrumentation_ess = ControlFlowRegistry.INSTANCE.recallAndIncrementThrea	        _kieker_sourceInstrumentation_ess = ControlFlowRegistry.INSTANCE.recallAndIncrementThrea
        if ((_kieker_sourceInstrumentation_eoi == -1) || (_kieker_sourceInstrumentation_ess == -	        if ((_kieker_sourceInstrumentation_eoi == -1) || (_kieker_sourceInstrumentation_ess == -
            System.err.println("eoi and/or ess have invalid values: eoi == {} ess == {}" + _kiek	            System.err.println("eoi and/or ess have invalid values: eoi == {} ess == {}" + _kiek
            MonitoringController.getInstance().terminateMonitoring();					            MonitoringController.getInstance().terminateMonitoring();
        }												        }
    }													    }
    // measure before											    // measure before
    final long _kieker_sourceInstrumentation_tin = MonitoringController.getInstance().getTimeSou	    final long _kieker_sourceInstrumentation_tin = MonitoringController.getInstance().getTimeSou
    ;													    ;
    try {												    try {
        int tmp = 2;											        int tmp = 2;
        for (int i = 0; i < 10; i++) {								   |	        for (int i = 0; i < 70000000; i++) {
            tmp += i ^ i;										            tmp += i ^ i;
        }												        }
        return tmp;											        return tmp;
    } finally {												    } finally {
        // measure after										        // measure after
        final long _kieker_sourceInstrumentation_tout = MonitoringController.getInstance().getTi	        final long _kieker_sourceInstrumentation_tout = MonitoringController.getInstance().getTi
        MonitoringController.getInstance().newMonitoringRecord(new OperationExecutionRecord(_kie	        MonitoringController.getInstance().newMonitoringRecord(new OperationExecutionRecord(_kie
        // cleanup											        // cleanup
        if (_kieker_sourceInstrumentation_entrypoint) {							        if (_kieker_sourceInstrumentation_entrypoint) {
            ControlFlowRegistry.INSTANCE.unsetThreadLocalTraceId();					            ControlFlowRegistry.INSTANCE.unsetThreadLocalTraceId();
            ControlFlowRegistry.INSTANCE.unsetThreadLocalEOI();						            ControlFlowRegistry.INSTANCE.unsetThreadLocalEOI();
            ControlFlowRegistry.INSTANCE.unsetThreadLocalESS();						            ControlFlowRegistry.INSTANCE.unsetThreadLocalESS();
        } else {											        } else {
            // next operation is ess									            // next operation is ess
            ControlFlowRegistry.INSTANCE.storeThreadLocalESS(_kieker_sourceInstrumentation_ess);	            ControlFlowRegistry.INSTANCE.storeThreadLocalESS(_kieker_sourceInstrumentation_ess);
        }												        }
        ;												        ;
    }													    }
}													}
